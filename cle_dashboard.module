<?php

/**
 * Implements hook_menu().
 */
function cle_dashboard_menu() {
  $items['cle-dashboard'] = array(
    'title' => 'CLE Dashboard',
    'page callback' => 'cle_dashboard_page',
    'access arguments' => array('access cle dashboard'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function cle_dashboard_permission() {
  return array(
    'access cle dashboard' =>  array(
      'title' => t('Administer CLE dashboard'),
      'description' => t('Ability to access CLE managment dashboard.'),
    ),
  );
}

function cle_dashboard_page() {
  return theme('cle_dashboard');
}

/**
 * Implements hook_theme().
 */
function cle_dashboard_theme($existing, $type, $theme, $path) {
  return array(
    'cle_dashboard' => array(
      'variables' => array('content' => NULL),
      'template' => 'templates/cle-dashboard',
    ),
  );
}

/**
 * Implementation of hook_preprocess_cle_controlboard().
 */
function cle_dashboard_preprocess_cle_dashboard(&$variables) {
  drupal_add_css('https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/css/materialize.min.css', array('type' => 'external'));
  drupal_add_css('https://fonts.googleapis.com/icon?family=Material+Icons', array('type' => 'external'));
  drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.5/angular.js', array('type' => 'external'));
  drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.5/angular-sanitize.js', array('type' => 'external'));
  drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/js/materialize.min.js', array('type' => 'external'));
  drupal_add_css(drupal_get_path('module', 'cle_dashboard') . '/css/cle-dashboard.css');
  drupal_add_js(drupal_get_path('module', 'cle_dashboard') . '/js/app.js');

  // Instantiate the user
  global $user;
   
  $assignments = array();
  $assignments_ids = array();
  $my_submissions = array();
  $my_critiques = array();

  // Get a list of assignments
  $view_results = views_get_view_result('cle_dashboard'); 
  if ($view_results) {
    // ALWAYS REMOVE THE FIELD DATA TO PREVENT DATA FROM LEAKING OUT!!!
    foreach ($view_results as $key => $result) {
      unset($view_results[$key]->_field_data);
      $assignments_ids[] = $result->nid;
      $assignments[$result->nid] = $result;

      // Find out if the assignment is active
      $assignment_active = null;
      // if it has an end date
      if (isset($result->field_field_due_date[0]['raw']['value']) && $due_date = $result->field_field_due_date[0]['raw']['value']) {
        // if it has a beginning date
        if (isset($result->field_field_begin_date[0]['raw']['value']) && $begin_date = $result->field_field_begin_date[0]['raw']['value']) {
          if (time() > $begin_date && time() < $due_date) {
            $assignment_active = TRUE;
          }
        }
      }
      $assignments[$result->nid]->active = $assignment_active;

      // Find out if the Assignment has a critique
      $critique = new stdClass();
      $critique->active = FALSE;
      $critique->url = '';
      if (isset($result->field_field_cle_crit_type) && $type = $result->field_field_cle_crit_type) {
        if ($type != 'No critique') {
          $critique->active = TRUE;
          $critique->url = base_path() . 'cle/critique/critique-peer/' . $result->nid . '?og_group_ref=' . $result->node_og_membership_nid;
        }
      }
      $assignments[$result->nid]->critique = $critique;
    }
  }

  // Get a list of 'My Submissions'
  $view_results = views_get_view_result('cle_dashboard_my_submissions', 'Master', $user->uid);
  if ($view_results) {
    // ALWAYS REMOVE THE FIELD DATA TO PREVENT DATA FROM LEAKING OUT!!!
    foreach ($view_results as $key => &$result) {
      unset($view_results[$key]->_field_data);
      if ($result->node_created) {
        $result->node_created = $result->node_created * 1000; 
      }
      $my_submissions = $view_results;
    }
  }

  // Get a list of 'My Critiques'
  $view_results = views_get_view_result('cle_dashboard_my_critiques', 'Master', $user->uid); 
  if ($view_results) {
    // ALWAYS REMOVE THE FIELD DATA TO PREVENT DATA FROM LEAKING OUT!!!
    foreach ($view_results as $key => $result) {
      unset($view_results[$key]->_field_data);
      if ($result->node_created) {
        $result->node_created = $result->node_created * 1000; 
      }
      $my_critiques = $view_results;
    }
  }

  drupal_add_js(array('cleDashboard' => array('assignments' => $assignments, 'submissions' => $my_submissions, 'critiques' => $my_critiques)), 'setting');
}

function cle_dashboard_menu_alter(&$items) {
  $items['cle/critique/critique-peer/%']['access callback'][] = '_cle_dashboard_critique_peer_access_callback';
  $items['cle/critique/critique-peer/%']['access arguments'] = array(3);
}

function _cle_dashboard_critique_peer_access_callback($assignment_id = NULL) {
  if (_cle_dashboard_critique_date_active($assignment_id)) {
    return TRUE;
  }
  else {
    drupal_set_message('Critiques are not yet active for this assignment.', 'status', FALSE);
    return FALSE;
  }
}

function _cle_dashboard_critique_date_active($assignment_id) {
  $active = FALSE;
  $assignment = entity_load_single('node', $assignment_id); 
  $critique_begin = strtotime($assignment->field_critique_date['und'][0]['value']);
  $critique_end = strtotime($assignment->field_critique_date['und'][0]['value2']);
  
  // if there is no end date
  if ($critique_begin == $critique_end) {
    if (time() > $critique_begin) {
      $active = TRUE;
    }
  }
  // if there is an end date
  else {
    if (time() > $critique_begin && time() < $critique_end) {
      $active = TRUE;
    }
  }

  return $active;
}
